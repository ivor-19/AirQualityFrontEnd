import { View, Text, TouchableOpacity, SafeAreaView, StyleSheet } from 'react-native'
import React, { useEffect, useState } from 'react'
import { router, useNavigation } from 'expo-router'
import { MotiView } from '@motify/components'
import { Easing } from 'react-native-reanimated';
import { useAQI } from '../../context/AQIContext';
import axios from 'axios';

const Scanning = () => {
  const navigation = useNavigation();
  const { aqi, setAqi, pm2_5, setPm2_5, co, setC0, no2, setN02, timestamp, setTimestamp } = useAQI();
  const [date, setDate] = useState('');
  const getCurrentDate = () => {
    const date = new Date();
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${month}-${day}-${year}`
  }
  const getCurrentTime = () => new Date().toLocaleTimeString();
  
   
  useEffect(() => {
    const handleTimeOut = () => {
      setTimeout(() => {
        setAqi(Math.floor(Math.random() * 500)); 
        setPm2_5(Math.floor(Math.random() * 500)); 
        setC0(Math.floor(Math.random() * 500)); 
        setN02(Math.floor(Math.random() * 500)); 

        const currentDate = getCurrentDate();
        setDate(currentDate);
        
        const currentTimestamp = getCurrentTime();
        setTimestamp(currentTimestamp);
      
        router.push('home');
      }, 3000);
    }
    const reset = navigation.addListener('focus', () => {
      handleTimeOut();
    })

    return () => {
      reset();
    }
  }, [navigation, setAqi, setPm2_5, setC0, setN02, setTimestamp])


  useEffect(() => {
    if(date === '' || aqi === '0'){
      console.log('Date must not be null. Air Quality is being scanned...');
    }
    else{
      const submitData = async () => {
        const newData = { date, timestamp, aqi, pm2_5, co, no2};
          try {
            const response = await axios.post('https://air-quality-back-end.vercel.app/api/history', newData);
            console.log('new history data is added', response.data);
            
          } catch (error) {
            console.log('Error submitting data: ', error)
          }
      }
      submitData();
    }
  }, [date, timestamp, aqi, pm2_5, co, no2])

  return (
    <View className='flex-1 items-center justify-center bg-white'>
      {[...Array(3).keys()].map(index => {
        return (
          <MotiView
            from={{ opacity: 0.7, scale: 1.5 }} 
            animate={{ opacity: 0, scale: 4 }} 
            transition={{
              loop: true, 
              type: 'timing', 
              duration: 2000, 
              easing: Easing.inOut(Easing.ease),
              delay: index * 400, 
              repeatReverse: false, 
            }}
            key={index}
            style={{
              width: 80, 
              height: 80, 
              borderRadius: 50, 
              backgroundColor: '#699571',
              position: 'absolute', 
              
            }}
          />
          
        )
      })}
      <View className='bg-primary-OP w-28 h-28 rounded-full z-50' style={{shadowColor:'#699571', elevation: 40, justifyContent: 'center', alignItems: 'center'}}></View>
      
      {/* Optionally, you can add a button to manually navigate to home */}
      {/* <TouchableOpacity className='bg-slate-200 h-6 px-2' onPress={() => router.push('home')}>
        <Text>Go Back</Text>
      </TouchableOpacity> */}
    </View>
  )
}

const styles = StyleSheet.create({
  // You can add more styles here
})

export default Scanning









import { View, Text, Modal, TouchableOpacity } from 'react-native'
import React, { useState } from 'react'
import { router, Tabs } from 'expo-router'
import RemixIcon from 'react-native-remix-icon'

const TabLayout = () => {
  const [modalVisible, setModalVisible] = useState(false)
  
  // Function to handle tab press for "sample" tab
  const handleSampleTabPress = () => {
    setModalVisible(true);
  }

  const toggleConfirmScan = () => {
    setModalVisible(false);
    router.push('scanning');
  }

  const toggleCancelScan = () => {
    setModalVisible(false);
  }

  return (
    <>
      <Tabs screenOptions={{
          tabBarStyle: {height: 70, backgroundColor: '#1d1c1a', marginHorizontal: 8, bottom: 10, borderRadius: 28,}, 
          tabBarLabelStyle: {margin: 6},
          tabBarItemStyle: {padding: 12}, 
          tabBarActiveTintColor: '#fff',  
          tabBarInactiveTintColor: '#d1d5db70', 
          tabBarHideOnKeyboard: true,
      }}>
        <Tabs.Screen 
            name='(homeTab)'
            options={{
                headerShown: false,
                title: '',
                tabBarIcon: ({ color, focused }) => <RemixIcon size={24} name={focused ? 'ri-home-fill' : 'ri-home-line'} color={color} />,
            }}
        />
        <Tabs.Screen
            name='(historyTab)'
            options={{
                headerShown: false,
                title: '',
                tabBarIcon: ({ color, focused }) => <RemixIcon size={24} name={focused ? 'ri-file-list-2-fill' : 'ri-file-list-2-line'} color={color} />,
            }}
        />    
        <Tabs.Screen
            name='scanning'
            options={({ route }) => ({
                headerShown: false,
                title: '',
                tabBarStyle: { display: route.name === 'scanning' ? 'none' : 'flex' },  
                tabBarButton: (props) => (
                  // Intercept the sample tab press and show the modal
                  <TouchableOpacity onPress={handleSampleTabPress} className='h-20 w-20 bg-pastel-black items-center justify-center rounded-full absolute top-[-50] border-4 border-white'>
                    <RemixIcon size={24} name={'ri-scan-2-line'} color='white' />
                  </TouchableOpacity>
        
                ),
                
               
            })}
        />
        <Tabs.Screen
            name='(settingsTab)'
            options={{
                headerShown: false,
                title: '',
                tabBarIcon: ({ color, focused }) => <RemixIcon size={24} name={focused ? 'ri-settings-fill' : 'ri-settings-line'} color={color} />,
            }}
        />
        <Tabs.Screen
            name='(aboutTab)'
            options={{
                headerShown: false,
                title: '',
                tabBarIcon: ({ color, focused }) => <RemixIcon size={24} name={focused ? 'ri-information-fill' : 'ri-information-line'} color={color} />,
            }}
        />
    
      </Tabs>

      {/* Modal that will show when sample tab is clicked */}
      <Modal
        transparent={true}
        animationType="fade"
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)} // Close the modal
      >
        <View className='flex-1 items-center justify-center' style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}>
          <View className='w-[80%] bg-white rounded-[10px] px-8 '>
            <Text className='my-5 font-pRegular text-[12px]'>You are about to begin the scanning process</Text>
            <View className='py-4 w-full items-end justify-center'>
                <View className='flex-row' style={{gap: 10}}>
                    <TouchableOpacity onPress={toggleCancelScan} className='py-2 px-4' activeOpacity={0.6}>
                        <Text className='font-pRegular text-[10px]'>Cancel</Text>
                    </TouchableOpacity>
                    <TouchableOpacity onPress={toggleConfirmScan} className='py-2 px-4 bg-pastel-black rounded-custom' activeOpacity={0.6}>
                        <Text className='text-white font-pRegular text-[10px]'>Confirm</Text>
                    </TouchableOpacity>
                </View>
            </View>
          </View>
        </View>
      </Modal>
    </>
  );
}

export default TabLayout;